//
//  FirstTabViewController.swift
//  News
//
//  Created by Игорь on 19.12.2019.
//  Copyright (c) 2019 Igor Zhyzhyrii. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FirstTabDisplayLogic: class {
    func returnParser(viewModel: FirstTab.GetSavedNewParser.ViewModel)
}

class FirstTabViewController: UITableViewController, FirstTabDisplayLogic, Parser {
    
    //@IBOutlet private var nameTextField: UITextField!
    
    // MARK: - Public properties
    
    var interactor: FirstTabBusinessLogic?
    var router: (NSObjectProtocol & FirstTabRoutingLogic & FirstTabDataPassing)?
    
    var parser: GenericNewsParser!
    
    // MARK: - Private properties
    
    //    private var feedsModels: [FeedModel]!
    //    private lazy var selectedIndexOfTab = tabBarController?.selectedIndex
    private lazy var tabBar = tabBarController?.tabBar
    
    // MARK: Object lifecycle
    
    //    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    //        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    //        setup()
    //    }
    //
    //    required init?(coder aDecoder: NSCoder) {
    //        super.init(coder: aDecoder)
    //        setup()
    //    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        FirstTabConfigurator.shared.configure(with: self)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        guard let tabBar = tabBar else { return }
        guard let selectedBarItem = tabBar.selectedItem,
            let indexOfTab = tabBar.items?.firstIndex(of: (selectedBarItem)) else { return }
        
        getSavedNewParser(indexOfTab: indexOfTab)
        guard let parser = parser else { return }
        parser.delegate = self
        parser.startParsingWithContentsOfURL()
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: Get parser of saved new
    
    func getSavedNewParser(indexOfTab: Int) {
        let request = FirstTab.GetSavedNewParser.Request(indexOfTab: indexOfTab)
        interactor?.getSavedNewParser(request: request)
    }
    
    func returnParser(viewModel: FirstTab.GetSavedNewParser.ViewModel) {
        parser = viewModel.parser
    }
    
    func parsingWasFinished() {
        tableView.reloadData()
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard let parser = parser else { return 0 }
        return parser.entities.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath)
        
        guard let parser = parser else { return cell }
        
        if let title = parser.entities[indexPath.row].title {
            cell.textLabel?.text = title
        }
        
        return cell
    }
}
