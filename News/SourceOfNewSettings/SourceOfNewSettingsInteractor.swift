//
//  SourceOfNewSettingsInteractor.swift
//  News
//
//  Created by Игорь on 29.12.2019.
//  Copyright (c) 2019 Igor Zhyzhyrii. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SourceOfNewSettingsBusinessLogic {
    func displayNavigationTitle()
    func saveFeedSettings()
    func displaySourceOfNews()
    func displayTabBarItemTitle()
    func selectNewSource(request: SourceOfNewSettings.SelectNewSource.Request)
    func updateTitleOfTheNew(request: SourceOfNewSettings.UpdateTitleOfTheNew.Request)
}

protocol SourceOfNewSettingsDataStore {
    var feedsModels: [FeedModel]! { get set }
    var numberOfTab: Int! { get set }
}

class SourceOfNewSettingsInteractor: SourceOfNewSettingsBusinessLogic, SourceOfNewSettingsDataStore {
    
    var presenter: SourceOfNewSettingsPresentationLogic?
    var feedsModels: [FeedModel]!
    var numberOfTab: Int!
    var indexPathOfEditedRow: IndexPath!
    
    // MARK: - Display source of new
    
    func displaySourceOfNews() {
        if let feedsModels = UserDefaultsStorageManager.shared.getSavedFeeds(forKey: numberOfTab) {
            self.feedsModels = feedsModels
        } else {
            feedsModels = Feed.allCases.map { (feed) -> FeedModel in
                FeedModel(feedName: feed.newName, feedSource: feed.url, isSelected: false)
            }
        }
        
        let response = SourceOfNewSettings.DisplaySourceOfNew.Response(feedsModels: feedsModels)
        presenter?.presentSourceOfNew(response: response)
    }
    
    // MARK: - Select new source
    
    func selectNewSource(request: SourceOfNewSettings.SelectNewSource.Request) {
        if let selectedIndex = feedsModels.firstIndex(where: { $0.feedName == request.feed.feedName }) {
            for index in 0..<feedsModels.count {
                feedsModels[index].isSelected = (index == selectedIndex) ? !feedsModels[index].isSelected : false
            }
        }
        
        let response = SourceOfNewSettings.SelectNewSource.Response(feedsModels: feedsModels)
        presenter?.presentSourceOfNew(response: response)
    }
    
    //MARK: - Display tab bar title
    
    func displayTabBarItemTitle() {
        let feedName = getSelectedFeedName()
        
        let response = SourceOfNewSettings.DisplayTabBarItemTitle.Response(tabBarItemTitle: feedName, numberOfTab: numberOfTab)
        presenter?.presentTabBarItemTitle(response: response)
    }
    
    // MARK: - Display navigation title
    
    func displayNavigationTitle() {
        if let numberOfTab = numberOfTab {
            let response = SourceOfNewSettings.DisplayNavigationTitle.Response(numberOfTab: numberOfTab)
            presenter?.presentNavigationTitle(response: response)
        }
    }
    
    // MARK: - Save feed settings
    
    func saveFeedSettings() {
        UserDefaultsStorageManager.shared.saveFeeds(feedsModels, forKey: numberOfTab)
        
        let feedName = getSelectedFeedName()
        
        let response = SourceOfNewSettings.SaveFeedSettings.Response(tabBarItemTitle: feedName, numberOfTab: numberOfTab)
        presenter?.presentTabBarItemTitle(response: response)
    }
    
    //MARK: - Update title of the new
    
    func updateTitleOfTheNew(request: SourceOfNewSettings.UpdateTitleOfTheNew.Request) {
        indexPathOfEditedRow = request.indexPathOfRow
        
        if let _ = feedsModels.first(where: { (feed) -> Bool in
            feed.feedName == request.feedName
        }) {
            let response = SourceOfNewSettings.UpdateTitleOfTheNew.Response(success: false, feeds: feedsModels, numberOfTab: numberOfTab, indexPathfOfEditedRow: indexPathOfEditedRow)
            presenter?.presentTitleOfTheNew(response: response)
        } else {
            feedsModels[indexPathOfEditedRow.row].feedName = request.feedName
            
            let response = SourceOfNewSettings.UpdateTitleOfTheNew.Response(success: true, feeds: feedsModels, numberOfTab: numberOfTab, indexPathfOfEditedRow: indexPathOfEditedRow)
            presenter?.presentTitleOfTheNew(response: response)
        }
    }
    
    // MARK: - Get selected feedName
    
    private func getSelectedFeedName() -> String? {
        if let selectedFeed = feedsModels.first(where: { (feed) -> Bool in
            feed.isSelected
        }) {
            return selectedFeed.feedName
        } else {
            return nil
        }
    }
    
}
