//
//  TabSettingsInteractor.swift
//  News
//
//  Created by Игорь on 26.12.2019.
//  Copyright (c) 2019 Igor Zhyzhyrii. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TabSettingsBusinessLogic: ProvideFeedDelegate {
    func displayNavigationTitle(request: TabSettings.DisplayNavigationTitle.Request)
    func saveFeedSettings()
    func displayNameOfTheSourceNew()
}

protocol TabSettingsDataStore {
    var numberOfTab: Int! { get set }
    var savedFeed: FeedModel? { get }
}

class TabSettingsInteractor: TabSettingsBusinessLogic, TabSettingsDataStore {
    
    var presenter: TabSettingsPresentationLogic?
    var worker: TabSettingsWorker?
    var numberOfTab: Int!
    var savedFeed: FeedModel?
    
    // MARK: - Display navigation title
    
    func displayNavigationTitle(request: TabSettings.DisplayNavigationTitle.Request) {
        worker = TabSettingsWorker()
        worker?.doSomeWork()
        
        if let numberOfTab = numberOfTab {
            let response = TabSettings.DisplayNavigationTitle.Response(numberOfTab: numberOfTab)
            presenter?.presentNavigationTitle(response: response)
        }
    }
    
    // MARK: - Save feed settings
    
    func saveFeedSettings() {
        if savedFeed == nil {
            savedFeed = StorageManager.shared.getSavedFeed(forKey: numberOfTab)
        }
        StorageManager.shared.saveFeed(savedFeed, forKey: numberOfTab)
    }
    
    // MARK: - Provide feed delegate
    
    func provideFeed(_ feed: FeedModel) {
        savedFeed = feed
    }
    
    // MARK: - Display name of the source new
    
    func displayNameOfTheSourceNew() {
        let feedFromMemory = StorageManager.shared.getSavedFeed(forKey: numberOfTab)
        let response = TabSettings.DisplayNameOfTheNew.Response(feedName: feedFromMemory?.feedName ?? "Provide title for new`s source")
        presenter?.presentNameOfTheSourceNew(response: response)
    }
    
}
